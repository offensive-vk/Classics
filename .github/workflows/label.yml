name: CI / Automated Label

on: 
  schedule:
    - cron: '0 */1 * * *'
  issues:
    types: [opened, edited]
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  label_issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Label Issues
      if: github.event_name == 'issues'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.BOT_TOKEN }}
        script: |
          const issue = context.payload.issue;
          const labels = [];
          const title = issue.title.toLowerCase();
          const body = issue.body ? issue.body.toLowerCase() : '';

          const labelMapping = [
            {label: 'algorithm', match: ['algorithm/*']},
            {label: 'asm', match: ['**/*.asm']},
            {label: 'c/c++', match: ['c++/*', '**/*.cpp', '**/*.hpp', '**/*.c++', '**/*.cxx', '**/*.ixx', 'c/*', '**/*.c', '**/*.h']},
            {label: 'ci/cd', match: ['ci/cd', 'pipeline', 'workflow', '.yml', 'dockerfile', 'compose.yaml']},
            {label: 'documentation', match: ['**/*.md', '.github/*.md']},
            {label: 'pr_template', match: ['.github/pull-request-template.md', '.github/pr-bot-template.md']},
            {label: 'dotfiles', match: ['.gitignore', '.gitattributes', 'license']},
            {label: 'shell', match: ['**/*.sh', 'bash/*']},
            {label: 'offensive-vk', match: ['boss', 'vedansh', 'admin', 'me', 'context', 'Classics']},
            {label: 'unknown', match: ['**/*.py', '**/*.toml', '**/*.php', '**/*.js', '**/*.ts', '**/*.rs']}
          ];

          let matched = false;
          labelMapping.forEach(({label, match}) => {
            if (match.some(keyword => title.includes(keyword) || body.includes(keyword))) {
              labels.push(label);
              matched = true;
            }
          });

          if (!matched) {
            labels.push('unknown');
          }

          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: labels
            });
          }

  label_pull_requests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Label Pull Requests
      if: github.event_name == 'pull_request'
      uses: actions/labeler@v4
      with:
        repo-token: ${{ secrets.BOT_TOKEN }}

  finish_cleanup:
    runs-on: ubuntu-latest
    needs: [label_issues, label_pull_requests]
    steps:
    - name: Finish Off & Cleanup
      run: echo "Successfully labeled all of the open issues and pull requests."
